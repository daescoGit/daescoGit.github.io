{"version":3,"sources":["ApiKey.js","components/Datacard.js","pages/weekview/Weekview.js","pages/dayview/Dayview.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","moment","require","DataCard","reading","this","props","readingDate","Date","setTime","dt","imgURL","weather","id","className","format","Math","round","main","temp","description","Component","WeekView","state","allData","currentTime","city","componentDidMount","weekURL","apiConfig","apiKey","fetch","then","res","json","wdata","timeNow","getHours","currentTimeTable","list","filter","dt_txt","setState","console","log","document","getElementById","innerHTML","error","name","dataCards","map","index","key","handleInputChange","event","target","value","handleSubmit","type","placeholder","onChange","onClick","DayView","currentDay","currentDayTable","length","App","to","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"0GAAAA,EAAOC,QAAU,CACb,OAAU,qC,8NCEVC,G,YAASC,EAAQ,KAEAC,E,iLAEP,IACEC,EAAYC,KAAKC,MAAjBF,QACFG,EAAc,IAAIC,KAExBD,EAAYE,QAAqB,IAAbL,EAAQM,IAE5B,IAAMC,EAAM,kBAAcP,EAAQQ,QAAQ,GAAGC,GAAjC,WAEZ,OACI,yBAAKC,UAAU,UACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,cAAcb,EAAOM,GAAaQ,OAAO,SACvD,uBAAGD,UAAU,cAAcb,EAAOM,GAAaQ,OAAO,eACtD,uBAAGD,UAAWH,IACd,4BAAKK,KAAKC,MAAMb,EAAQc,KAAKC,MAA7B,UACA,uBAAGL,UAAU,aAAaV,EAAQQ,QAAQ,GAAGQ,oB,GAlB/BC,aCDjBC,E,2MAEjBC,MAAQ,CACJC,QAAQ,GACRC,YAAY,GAEZC,KAAK,gB,EAGTC,kBAAoB,WAChB,IAAMD,EAAO,EAAKH,MAAMG,KAClBE,EAAO,6DAAyDF,EAAzD,uCAA4FG,IAAUC,QACnHC,MAAMH,GACDI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACF,IAAMC,GAAU,IAAI5B,MAAO6B,WAG3B,IACI,IAAMC,EAAmBH,EAAMI,KAAKC,QAAO,SAAApC,GAAO,OAAI,IAAII,KAAKJ,EAAQqC,QAAQJ,YAAcD,GAAW,IAAI5B,KAAKJ,EAAQqC,QAAQJ,WAAaD,EAAS,KAEvJ,EAAKM,SAAS,CACVlB,QAASW,EACTV,YAAaa,IACd,kBAAMK,QAAQC,IAAI,EAAKrB,UAC1BsB,SAASC,eAAe,aAAaC,UAAY,GAErD,MAAMC,GACFH,SAASC,eAAe,aAAaC,UAArC,qCAA+ErB,GAEnFmB,SAASC,eAAe,aAAaC,UAAY,EAAKxB,MAAMC,QAAQE,KAAKuB,S,EAIrFC,UAAY,WACR,OAAO,EAAK3B,MAAME,YAAY0B,KAAI,SAAC/C,EAASgD,GAAV,OAAoB,kBAAC,EAAD,CAAUhD,QAASA,EAASiD,IAAKD,Q,EAG3FE,kBAAoB,SAACC,GAGjB,EAAKb,SAAS,CAAChB,KAAM6B,EAAMC,OAAOC,S,EAGtCC,aAAe,WACX,EAAK/B,qB,wEAIL,OACI,yBAAKb,UAAU,aACf,wBAAIA,UAAU,uBAAd,oBACI,2BAAO6C,KAAK,OAAO9C,GAAG,aAAa+C,YAAa,IAAMvD,KAAKkB,MAAMG,KAAMmC,SAAUxD,KAAKiD,oBACtF,4BAAQQ,QAASzD,KAAKqD,cAAtB,QACA,yBAAK7C,GAAG,cACZ,6BACA,wBAAIA,GAAG,YAAYC,UAAU,yBAC7B,yBAAKA,UAAU,8BACVT,KAAK6C,kB,GA1DgB7B,aCAjB0C,E,2MAEjBxC,MAAQ,CACJC,QAAQ,GACRwC,WAAW,GAEXtC,KAAK,gB,EAGTC,kBAAoB,WAChB,IAAMD,EAAO,EAAKH,MAAMG,KAClBE,EAAO,6DAAyDF,EAAzD,uCAA4FG,IAAUC,QACnHC,MAAMH,GACDI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAGF,IACI,IAAM8B,EAAkB9B,EAAMI,KAAKC,QAAO,SAAApC,GAAO,OAAI,IAAII,KAAKJ,EAAQqC,WACtEwB,EAAgBC,OAAS,EAEzB,EAAKxB,SAAS,CACVlB,QAASW,EACT6B,WAAYC,IACb,kBAAMtB,QAAQC,IAAI,EAAKrB,UAC1BsB,SAASC,eAAe,aAAaC,UAAY,GAErD,MAAMC,GACFH,SAASC,eAAe,aAAaC,UAArC,qCAA+ErB,GAEnFmB,SAASC,eAAe,aAAaC,UAAY,EAAKxB,MAAMC,QAAQE,KAAKuB,S,EAIrFC,UAAY,WACR,OAAO,EAAK3B,MAAMyC,WAAWb,KAAI,SAAC/C,EAASgD,GAAV,OAAoB,kBAAC,EAAD,CAAUhD,QAASA,EAASiD,IAAKD,Q,EAG1FE,kBAAoB,SAACC,GAEjB,EAAKb,SAAS,CAAChB,KAAM6B,EAAMC,OAAOC,S,EAGtCC,aAAe,WACX,EAAK/B,qB,wEAIL,OACI,yBAAKb,UAAU,aACf,wBAAIA,UAAU,uBAAd,qBACI,2BAAO6C,KAAK,OAAO9C,GAAG,aAAa+C,YAAa,IAAMvD,KAAKkB,MAAMG,KAAMmC,SAAUxD,KAAKiD,oBACtF,4BAAQQ,QAASzD,KAAKqD,cAAtB,QACA,yBAAK7C,GAAG,cACZ,6BACJ,wBAAIA,GAAG,YAAYC,UAAU,yBACzB,yBAAKA,UAAU,8BACVT,KAAK6C,kB,GAzDe7B,a,gBCgCtB8C,E,iLA3BX,OACA,yBAAKrD,UAAU,OACb,kBAAC,IAAD,KACE,6BACE,4BACE,kBAAC,IAAD,CAAMsD,GAAG,gBAAT,gBAEA,0BAAMvD,GAAG,WAAT,KACA,4BACA,kBAAC,IAAD,CAAMuD,GAAG,oBAAT,gBAIJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,gBAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,oBACV,kBAAC,EAAD,c,GArBMjD,aCMEkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAShC,SAASC,eAAe,SD6H3C,kBAAmBgC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLL,QAAQK,MAAMA,EAAMoC,c","file":"static/js/main.9013b2e7.chunk.js","sourcesContent":["module.exports = {\r\n    \"apiKey\": \"159b4e1b8e9e1237d5e279d2904f03a8\"\r\n}\r\n\r\n//kexin11653@mrisemail.com\r\n//password123\r\n//159b4e1b8e9e1237d5e279d2904f03a8\r\n\r\n//povap96326@newe-mail.com\r\n//password123\r\n//d8d5ed7e715c385ac016e449eadb6a9a","import React, { Component } from 'react';\r\nimport 'moment/locale/da';\r\nimport 'moment-timezone';\r\nvar moment = require('moment');\r\n\r\nexport default class DataCard extends Component {\r\n\r\n    render() {\r\n        const { reading } = this.props\r\n        const readingDate = new Date()\r\n        // converting to ms\r\n        readingDate.setTime(reading.dt * 1000)\r\n        // owfonts icons, 5x = size\r\n        const imgURL = `owf owf-${reading.weather[0].id} owf-4x`\r\n\r\n        return(\r\n            <div className=\"col-sm\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        <h3 className=\"card-title\">{moment(readingDate).format('dddd')}</h3>\r\n                        <p className=\"text-muted\">{moment(readingDate).format('Do MMM, LT')}</p>\r\n                        <i className={imgURL} />\r\n                        <h4>{Math.round(reading.main.temp)} °C</h4>                        \r\n                        <p className=\"card-text\">{reading.weather[0].description}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport apiConfig from '../../ApiKey';\r\nimport DataCard from '../../components/Datacard';\r\n\r\nexport default class WeekView extends Component {\r\n\r\n    state = {\r\n        allData:[],\r\n        currentTime:[],\r\n        // todo local area\r\n        city:'København'\r\n    }\r\n\r\n    componentDidMount = () => {        \r\n        const city = this.state.city\r\n        const weekURL = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&units=metric&lang=da&APPID=${apiConfig.apiKey}`\r\n        fetch(weekURL)\r\n            .then(res => res.json())\r\n            .then(wdata => {\r\n                const timeNow = new Date().getHours()\r\n                // isolating dataset instances within 3hours from current time (data gets pulled every 3h for 5d)\r\n                // todo make dry\r\n                try {\r\n                    const currentTimeTable = wdata.list.filter(reading => new Date(reading.dt_txt).getHours() >= timeNow && new Date(reading.dt_txt).getHours() < timeNow +3)\r\n\r\n                    this.setState({\r\n                        allData: wdata,\r\n                        currentTime: currentTimeTable\r\n                    }, () => console.log(this.state))\r\n                    document.getElementById(\"errorText\").innerHTML = ''\r\n                }\r\n                catch(error) {\r\n                    document.getElementById(\"errorText\").innerHTML = `Fandt ingen resultater for ${city}`\r\n                }\r\n                document.getElementById(\"cityTitle\").innerHTML = this.state.allData.city.name\r\n            })  \r\n    }\r\n\r\n    dataCards = () => {\r\n        return this.state.currentTime.map((reading, index) => <DataCard reading={reading} key={index} />)\r\n    }\r\n\r\n    handleInputChange = (event) => {\r\n        // todo try-catch?\r\n        // todo + zip, city-id convert?\r\n        this.setState({city: event.target.value });\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        this.componentDidMount()\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container\">\r\n            <h1 className=\"display-4 jumbotron\">5 dages prognose</h1>\r\n                <input type=\"text\" id=\"searchCity\" placeholder={\" \" + this.state.city} onChange={this.handleInputChange}/>\r\n                <button onClick={this.handleSubmit}>Find</button>\r\n                <div id=\"errorText\"></div>\r\n            <hr />\r\n            <h5 id=\"cityTitle\" className=\"display-5 text-muted\">{}</h5>\r\n            <div className=\"row justify-content-center\">     \r\n                {this.dataCards()}     \r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport apiConfig from '../../ApiKey';\r\nimport DataCard from '../../components/Datacard';\r\n\r\nexport default class DayView extends Component {\r\n\r\n    state = {\r\n        allData:[],\r\n        currentDay:[],\r\n        // todo local area\r\n        city:'København'\r\n    }\r\n\r\n    componentDidMount = () => {        \r\n        const city = this.state.city\r\n        const weekURL = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&units=metric&lang=da&APPID=${apiConfig.apiKey}`\r\n        fetch(weekURL)\r\n            .then(res => res.json())\r\n            .then(wdata => {\r\n                // \r\n                // todo fix\r\n                try {\r\n                    const currentDayTable = wdata.list.filter(reading => new Date(reading.dt_txt)) \r\n                    currentDayTable.length = 5; \r\n\r\n                    this.setState({\r\n                        allData: wdata,\r\n                        currentDay: currentDayTable\r\n                    }, () => console.log(this.state))\r\n                    document.getElementById(\"errorText\").innerHTML = ''\r\n                }\r\n                catch(error) {\r\n                    document.getElementById(\"errorText\").innerHTML = `Fandt ingen resultater for ${city}`\r\n                }\r\n                document.getElementById(\"cityTitle\").innerHTML = this.state.allData.city.name          \r\n            })\r\n    }\r\n\r\n    dataCards = () => {\r\n        return this.state.currentDay.map((reading, index) => <DataCard reading={reading} key={index} />)\r\n    }\r\n\r\n    handleInputChange = (event) => {\r\n        // todo + zip, city-id convert?\r\n        this.setState({city: event.target.value });\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        this.componentDidMount()\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container\">\r\n            <h1 className=\"display-4 jumbotron\">Dagens vejrudsigt</h1>\r\n                <input type=\"text\" id=\"searchCity\" placeholder={\" \" + this.state.city} onChange={this.handleInputChange}/>\r\n                <button onClick={this.handleSubmit}>Find</button>\r\n                <div id=\"errorText\"></div>\r\n            <hr />\r\n        <h5 id=\"cityTitle\" className=\"display-5 text-muted\">{}</h5>\r\n            <div className=\"row justify-content-center\">     \r\n                {this.dataCards()}\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport WeekView from './pages/weekview/Weekview';\r\nimport DayView from './pages/dayview/Dayview';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\n\r\nclass App extends Component {\r\n  \r\n  render() {\r\n    return(\r\n    <div className=\"App\">\r\n      <Router>\r\n        <nav>\r\n          <li>\r\n            <Link to=\"/weather-app\">Dagens vejr</Link>\r\n            </li>\r\n            <span id=\"navPipe\">|</span>\r\n            <li>\r\n            <Link to=\"/weather-app/uge\">Ugens vejr</Link>\r\n            </li>\r\n        </nav>\r\n\r\n        <Switch>\r\n          <Route exact path=\"/weather-app\">\r\n            <DayView />\r\n          </Route>\r\n          <Route path=\"/weather-app/uge\">\r\n            <WeekView />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}